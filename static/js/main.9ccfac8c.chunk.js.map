{"version":3,"sources":["components/input/index.jsx","constants/index.js","components/form/index.jsx","components/Weather/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","react_default","a","createElement","disabled","type","className","value","id","placeholder","onChange","onBlur","API_KEY","Form","onSubmit","children","Weather","concat","data","main","temp","toFixed","App","state","loading","error","weatherData","city","event","_this","setState","Object","defineProperty","target","preventDefault","setTimeout","fetch","then","res","console","log","ok","json","components_form","this","components_input","components_Weather","message","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAeeA,eAZD,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,SACEC,SAAUJ,EAAMI,SAChBC,KAAML,EAAMK,MAAQ,OACpBC,UAAWN,EAAMM,UACjBC,MAAOP,EAAMO,MACbC,GAAIR,EAAMQ,GACVC,YAAaT,EAAMS,YACnBC,SAAUV,EAAMU,SAChBC,OAAQX,EAAMW,WCZLC,EAAU,mCCMRC,EALF,SAAAb,GAAK,OAChBC,EAAAC,EAAAC,cAAA,QAAMW,SAAUd,EAAMc,SAAUR,UAAWN,EAAMM,WAC9CN,EAAMe,WCQIC,EATC,SAAAhB,GAEd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBAAAc,QAAqBjB,EAAMkB,KAAKC,KAAKC,KAH1B,QAGyCC,QAAQ,GAA5D,YCkESC,6MAhEbC,MAAQ,CACNC,SAAS,EACTC,MAAO,KACPC,YAAa,KACbC,KAAM,MAERjB,SAAW,SAAAkB,GACTC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBH,EAAMK,OAAOzB,GAAKoB,EAAMK,OAAO1B,WAElDO,SAAW,SAAAc,GACTA,EAAMM,iBACNL,EAAKC,SAAS,CAAEN,SAAS,IACzBW,WAAW,WACTC,MAAK,oDAAAnB,OAEDY,EAAKN,MAAMI,KAFV,WAAAV,OAGOL,IAETyB,KAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAI,MAAOF,GACdA,EAAIG,GAKFH,EAAII,OAJFJ,EACJI,OACAL,KAAK,SAAAK,GAAI,OAAIb,EAAKC,SAAS,CAAEL,MAAOiB,EAAMlB,SAAS,QAIzDa,KAAK,SAAAK,GACJH,QAAQC,IAAI,OAAQE,GACpBb,EAAKC,SAAS,CAAEJ,YAAagB,EAAMlB,SAAS,OAE/C,8EAIH,OACEvB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAACwC,EAAD,CAAM7B,SAAU8B,KAAK9B,UACnBb,EAAAC,EAAAC,cAAC0C,EAAD,CACEtC,MAAOqC,KAAKrB,MAAMI,KAClBnB,GAAG,OACHC,YAAY,aACZC,SAAUkC,KAAKlC,WAEjBT,EAAAC,EAAAC,cAAC0C,EAAD,CACEzC,SAAUwC,KAAKrB,MAAMC,QACrBnB,KAAK,SACLE,MAAOqC,KAAKrB,MAAMC,QAAU,aAAe,YAG9CoB,KAAKrB,MAAMG,aAAezB,EAAAC,EAAAC,cAAC2C,EAAD,CAAS5B,KAAM0B,KAAKrB,MAAMG,cACpDkB,KAAKrB,MAAME,OACVxB,EAAAC,EAAAC,cAAA,oDAEGyC,KAAKrB,MAAME,MAAMsB,kBAxDdC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.9ccfac8c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./input.css\";\r\n\r\nconst Input = props => (\r\n  <input\r\n    disabled={props.disabled}\r\n    type={props.type || \"text\"}\r\n    className={props.className}\r\n    value={props.value}\r\n    id={props.id}\r\n    placeholder={props.placeholder}\r\n    onChange={props.onChange}\r\n    onBlur={props.onBlur}\r\n  />\r\n);\r\nexport default Input;\r\n","export const API_KEY = \"de5f8ae62cbbca76711831cf28072c18\";\r\n","import React from \"react\";\r\nconst Form = props => (\r\n  <form onSubmit={props.onSubmit} className={props.className}>\r\n    {props.children}\r\n  </form>\r\n);\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => {\r\n  const kelvin = 273.15;\r\n  return (\r\n    <div>\r\n      <p>{`Temparature: ${(props.data.main.temp - kelvin).toFixed(2)}Â°C`}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport { API_KEY } from \"./constants\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/Weather\";\n\nclass App extends Component {\n  state = {\n    loading: false,\n    error: null,\n    weatherData: null,\n    city: \"\"\n  };\n  onChange = event => {\n    this.setState({ [event.target.id]: event.target.value });\n  };\n  onSubmit = event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    setTimeout(() => {\n      fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${\n          this.state.city\n        }&appid=${API_KEY}`\n      )\n        .then(res => {\n          console.log(\"res\", res);\n          if (!res.ok) {\n            return res\n              .json()\n              .then(json => this.setState({ error: json, loading: false }));\n          }\n          return res.json();\n        })\n        .then(json => {\n          console.log(\"json\", json);\n          this.setState({ weatherData: json, loading: false });\n        });\n    }, 500);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Form onSubmit={this.onSubmit}>\n            <Input\n              value={this.state.city}\n              id=\"city\"\n              placeholder=\"Enter city\"\n              onChange={this.onChange}\n            />\n            <Input\n              disabled={this.state.loading}\n              type=\"submit\"\n              value={this.state.loading ? \"Loading...\" : \"Submit\"}\n            />\n          </Form>\n          {this.state.weatherData && <Weather data={this.state.weatherData} />}\n          {this.state.error && (\n            <p>\n              SOMETHING SOMEWHERE WENT TERRIBLY WRONG.\n              {this.state.error.message}\n            </p>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}