{"version":3,"sources":["components/input/index.jsx","constants/index.js","components/form/index.jsx","components/WeatherIcon/index.jsx","components/CurrentWeather/index.jsx","components/WeatherCard/index.jsx","components/ForecastWeather/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","react_default","a","createElement","Fragment","label","htmlFor","id","Object","assign","checked","disabled","type","className","value","placeholder","onChange","onBlur","name","API_KEY","Form","onSubmit","children","WeatherIcon","src","concat","image","icon","alt","description","CurrentWeather","components_WeatherIcon","data","weather","main","temp","units","humidity","clouds","all","WeatherCard","ForecastWeather","list","map","forecast","components_WeatherCard","App","state","loading","error","weatherData","city","currentWeather","forecastWeather","event","_this$setState","_this","setState","defineProperty","target","onChangeCheckbox","preventDefault","fetch","window","location","protocol","then","res","ok","console","log","json","currentUnits","currentCity","catch","forecastData","components_form","this","components_input","components_CurrentWeather","components_ForecastWeather","message","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b0cabba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./input.css\";\r\n\r\nconst Input = props => (\r\n  <>\r\n    {props.label && <label htmlFor={props.id}>{props.label}</label>}\r\n    <input\r\n      checked={props.checked}\r\n      disabled={props.disabled}\r\n      type={props.type || \"text\"}\r\n      className={props.className}\r\n      value={props.value}\r\n      id={props.id}\r\n      placeholder={props.placeholder}\r\n      onChange={props.onChange}\r\n      onBlur={props.onBlur}\r\n      name={props.name}\r\n      {...props}\r\n    />\r\n  </>\r\n);\r\nexport default Input;\r\n","export const API_KEY = \"de5f8ae62cbbca76711831cf28072c18\";\r\n","import React from \"react\";\r\nconst Form = props => (\r\n  <form onSubmit={props.onSubmit} className={props.className}>\r\n    {props.children}\r\n  </form>\r\n);\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst WeatherIcon = props => (\r\n  <img\r\n    src={`http://openweathermap.org/img/w/${props.image.icon}.png`}\r\n    alt={props.image.description}\r\n  />\r\n);\r\n\r\nexport default WeatherIcon;\r\n","import React from \"react\";\r\nimport WeatherIcon from \"../WeatherIcon\";\r\n\r\nconst CurrentWeather = props => {\r\n  return (\r\n    <div>\r\n      <WeatherIcon image={props.data.weather[0]} />\r\n      <p>{`Temparature: ${props.data.main.temp} ${\r\n        props.units === \"metric\" ? \"Â°C\" : \"F\"\r\n      }`}</p>\r\n      <p>{`Humidity: ${props.data.main.humidity}`}</p>\r\n      <p>{`Cloud: ${props.data.clouds.all}`}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from \"react\";\r\nimport \"./WeatherCard.css\";\r\nimport WeatherIcon from \"../WeatherIcon\";\r\n\r\nconst WeatherCard = props => {\r\n  return (\r\n    <div className=\"weather-card\">\r\n      <WeatherIcon image={props.weather.weather[0]} />\r\n      <p>{props.weather.main.humidity}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport WeatherCard from \"../WeatherCard\";\r\nimport \"./ForecastWeather.css\";\r\n\r\nconst ForecastWeather = props => {\r\n  return (\r\n    <div className=\"forecast-weather\">\r\n      {props.data.list.map(forecast => (\r\n        //<div>{forecast.main.pressure}</div>\r\n        <WeatherCard weather={forecast} />\r\n      ))}\r\n      {/* <p>{`Temperature: ${props.data.temp}`}.</p>\r\n      <p>{`Humidity: ${props.data.main.humidity}`}</p>\r\n      <p>{`Cloud: ${props.data.clouds.all}`}</p> */}\r\n    </div>\r\n  );\r\n};\r\nexport default ForecastWeather;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport { API_KEY } from \"./constants\";\nimport Form from \"./components/form\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport ForecastWeather from \"./components/ForecastWeather\";\n\nclass App extends Component {\n  state = {\n    loading: false,\n    error: null,\n    weatherData: null,\n    city: \"\",\n    currentWeather: true,\n    forecastWeather: true,\n    units: \"metric\"\n  };\n  onChange = event => {\n    this.setState({\n      [event.target.name || event.target.id]: event.target.value,\n      error: null\n    });\n  };\n  onChangeCheckbox = event => {\n    this.setState({\n      [event.target.name || event.target.id]: !this.state[\n        event.target.name || event.target.id\n      ]\n    });\n  };\n  onSubmit = event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    if (this.state.currentWeather)\n      fetch(\n        //to use the same protocol of where the app is run. in this case http to https\n        `${\n          window.location.protocol\n        }//api.openweathermap.org/data/2.5/weather?q=${\n          this.state.city\n        }&appid=${API_KEY}&units=${this.state.units}`\n      )\n        .then(res => {\n          if (!res.ok) {\n            console.log(\"res\", res);\n            res.json().then(json => {\n              throw json;\n            });\n          }\n          return res.json();\n        })\n        .then(json => {\n          console.log(\"json\", json);\n          this.setState({\n            weatherData: json,\n            loading: false,\n            currentUnits: this.state.units,\n            currentCity: this.state.currentCity\n          });\n        })\n        .catch(error => this.setState({ error, loading: false }));\n\n    if (this.state.forecastWeather)\n      fetch(\n        `${\n          window.location.protocol\n        }//api.openweathermap.org/data/2.5/forecast?q=${\n          this.state.city\n        }&appid=${API_KEY}&units=${this.state.units}`\n      )\n        .then(res => {\n          if (!res.ok) {\n            console.log(\"res\", res);\n            res.json().then(json => {\n              throw json;\n            });\n          }\n          return res.json();\n        })\n        .then(json => {\n          console.log(\"json\", json);\n          this.setState({\n            forecastData: json,\n            loading: false,\n            currentUnits: this.state.units,\n            currentCity: this.state.currentCity\n          });\n        })\n        .catch(error => this.setState({ error, loading: false }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Form onSubmit={this.onSubmit}>\n            <Input\n              label=\"City: \"\n              value={this.state.city}\n              id=\"city\"\n              placeholder=\"Enter city\"\n              onChange={this.onChange}\n            />\n            <br />\n            <Input\n              label=\"Current Weather\"\n              id=\"currentWeather\"\n              type=\"checkbox\"\n              onChange={this.onChangeCheckbox}\n              checked={this.state.currentWeather}\n            />\n            <br />\n\n            <Input\n              label=\"Forecast Weather\"\n              id=\"forecastWeather\"\n              type=\"checkbox\"\n              onChange={this.onChangeCheckbox}\n              checked={this.state.forecastWeather}\n            />\n            <br />\n            <Input\n              label=\"Imperial units\"\n              checked={\"imperial\" === this.state.units}\n              id=\"ImperialUnits\"\n              type=\"radio\"\n              name=\"units\"\n              value=\"imperial\"\n              onChange={this.onChange}\n            />\n\n            <br />\n            <Input\n              label=\"Metric units\"\n              checked={\"metric\" === this.state.units}\n              id=\"MetricUnit\"\n              type=\"radio\"\n              name=\"units\"\n              value=\"metric\"\n              onChange={this.onChange}\n            />\n\n            <br />\n            <Input\n              disabled={\n                !(this.state.currentWeather || this.state.forecastWeather) ||\n                this.state.loading ||\n                !this.state.city\n              }\n              type=\"submit\"\n              value={this.state.loading ? \"Loading...\" : \"Submit\"}\n            />\n          </Form>\n          {this.state.weatherData && (\n            <CurrentWeather\n              data={this.state.weatherData}\n              units={this.state.currentUnits}\n              city={this.state.currentCity}\n            />\n          )}\n          {this.state.forecastData && (\n            <ForecastWeather data={this.state.forecastData} />\n          )}\n          {this.state.error && (\n            <p>\n              SOMETHING SOMEWHERE WENT TERRIBLY WRONG.\n              {this.state.error.message}\n            </p>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}